# ver1.3 -- JackyHe398


# This file contains a configuration for the Anycubic Vyper printer from 2021.
# It uses a clone of the STM32F103 chip named GD32F103.
# There are 2 Mainboard versions out there v0.0.5 and v0.0.6, this config has
# been tested with the v0.0.6 only. It should probably work for v0.0.5 as well
# since there are no different changes in the Anycubic Marlin firmware.
# The LCD is not supported yet (might work, but didn't try yet).
#
# To create the Firmware you need to use the following configuration:
#     - Micro-controller: STM32
#     - Processor model: STM32F103
#     - Bootloader offset: 32KiB
#     - Communication interface: Serial (on USART1 PA10/PA9)
#
# To install the Firmware rename the klipper bin to `main_board_20xxxxxx.bin`
# and copy it to an SD Card.
# Power off the Printer, insert the SD Card and power it on.
# It should beep several times and the LCD should be stuck on the Splash screen.
# Now you should be able to connect to the Printer, you might need to change
# the mcu/serial setting in this config according to your set up.
#
# If you want to revert the Firmware back to Marlin you simply need to flash it
# with a anycubic firmware through the SD Card

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA7
position_min: -3
position_endstop: -3
position_max: 250
homing_speed: 40.0

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC13
microsteps: 16
rotation_distance: 32
endstop_pin: !PC5
position_min: -17
position_endstop: -17
position_max: 246
homing_speed: 40.0

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC14
microsteps: 16
rotation_distance: 8
endstop_pin: PB2
# position_endstop: -0.320
position_max: 260
position_min: -10
homing_speed: 5.0

[stepper_z1]
step_pin: PC0
dir_pin: !PC1
enable_pin: !PC15
microsteps: 16
rotation_distance: 8
endstop_pin: PC6

[extruder]
step_pin: PB4
dir_pin: !PB3
enable_pin: !PA15
microsteps: 16
rotation_distance: 22.76500  #has to be calibrated by everyone, diameter7.25
gear_ratio: 50:17
full_steps_per_rotation: 200
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
control: pid
pid_kp: 28.937
pid_ki: 1.295
pid_kd: 161.688
min_temp: 0
max_temp: 260
max_extrude_cross_section: 5
min_extrude_temp: 170

[heater_fan extruder_fan]
pin: PB1

[heater_bed]
heater_pin: PA4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PB0
control: pid
pid_kp: 67.648
pid_ki: 1.044
pid_kd: 1095.893
min_temp: 0
max_temp: 110

[fan]
pin: PA0

[probe]
pin: !PB12
samples: 3
samples_tolerance: 0.03
samples_tolerance_retries: 10
lift_speed: 8
#z_offset: 0
activate_gcode:
    probe_reset

[output_pin probe_reset_pin]
pin: PB13

[output_pin LED]
pin: mcu:PA13
pwm: True
value: 0
cycle_time: 0.001

[output_pin BEEPER_PIN]
pin: PB15
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001
scale: 1

[bed_mesh]
speed: 100
mesh_min: 10, 10
mesh_max: 240, 240
probe_count: 7, 7
mesh_pps: 3, 3
algorithm: bicubic
move_check_distance: 3
horizontal_move_z: 2

[filament_switch_sensor runout]
pause_on_runout: True
switch_pin: PA5
runout_gcode:
    M300
insert_gcode:
    M300

[mcu]
serial: /dev/ttyUSB0
restart_method: command

[safe_z_home]
home_xy_position: -3,-17
z_hop: 10

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 10
max_z_accel: 100

[gcode_macro probe_reset]
gcode:
    SET_PIN PIN=probe_reset_pin VALUE=0
    G4 P300
    SET_PIN PIN=probe_reset_pin VALUE=1
    G4 P100

[virtual_sdcard]
path: /home/pi/printer_data/gcodes

[pause_resume]


#Klipper required macros
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    {% set e = params.E|default(10) %}        #edit to your retract length
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    END_POS
    M140 S55

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    PREHEAT
    M190 S55
    M109 S190
    M300
    ##### set defaults #####
    {% set e = params.E|default(5) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    END_POS
    M84

[gcode_macro END_POS]
description: a def to move the thread to a suitable place
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}      #edit to your park position
    {% set y = params.Y|default(240) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[display_status]


#gcode macros
[gcode_macro g29]
gcode:
    {% set temperature = params.T|default(0) %}
    M140 S{temperature}
    G28
    probe_reset
    M190 S{temperature}
    BED_MESH_CALIBRATE
    G91
    G1 Z+25 F1500
    G90

[gcode_macro M0]
gcode:
    PAUSE

[gcode_macro m205]
gcode:
    G4

[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
    {% set P = params.P|default(100)|int %} ; P sets the tone duration
    {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} ; dont divide through zero
        {% set F = 1 %}
        {% set L = 0 %}
    {% elif S >= 10000 %} ;max frequency set to 10kHz
        {% set F = 0 %}
    {% else %}
        {% set F = 1/S %} ;convert frequency to seconds
    {% endif %}
    SET_PIN PIN=BEEPER_PIN VALUE={L} CYCLE_TIME={F} ;Play tone
    G4 P{P} ;tone duration
    SET_PIN PIN=BEEPER_PIN VALUE=0

[gcode_macro m500]
gcode:
    SAVE_CONFIG

[gcode_macro M600]
gcode:
    PAUSE



#Self define macros

[gcode_macro PREHEAT]
gcode:
    M140 S55
    M104 S190
